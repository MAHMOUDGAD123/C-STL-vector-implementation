

template <typename _Ty>
constexpr void swap(_Ty& Var1, _Ty& Var2)
{
	_Ty temp = std::move(Var1);
	Var1 = std::move(Var2);
	Var2 = std::move(temp);
}




//================================================= Sorting alogorithm =================================================


      // lambda
			auto _Ascending = [&]<typename _Ty>(_Ty * _Ptr, size_t _Size, size_t _idx) {
				uint64_t min(_idx);
				for (uint64_t i(_idx + 1); i < _Size; i++)
					if (_Ptr[i] < _Ptr[min]) min = i;

				return min;
			};
			auto _Descending = [&]<typename _Ty>(_Ty * _Ptr, size_t _Size, size_t _idx) {
				uint64_t max(_idx);
				for (uint64_t i(_idx + 1); i < _Size; i++)
					if (_Ptr[i] > _Ptr[max]) max = i;

				return max;
			};


			// in the (_Order) parameter:
			// for -> ascending sort use  -> { MG::utility::arr_util::_Ascending }
			// for -> descending sort use -> { MG::utility::arr_util::_Descending }
			// selection sort
			// using pointer
			template<typename Ty, typename Ordering>
			static constexpr void _Sort(Ty* _Ptr, size_t _Size, Ordering _Order) noexcept
			{
				for (size_t i(0); i < _Size; ++i)
					algorithm::swap(_Ptr[i], _Ptr[_Order(_Ptr, _Size, i)]);
			}

			// choose ascending or descending sorting
			template<typename Ty>
			static constexpr void sort(Ty* _Ptr, size_t _Size, bool _Ascending_Order = true)
			{
				if (_Ascending_Order) {
					_Sort(_Ptr, _Size, MG::utility::arr_util::_Ascending);
				}
				else {
					_Sort(_Ptr, _Size, MG::utility::arr_util::_Descending);
				}
			}




    
    //================================================= Searching alogorithms =================================================



			// get the index of an element in array
			// if not found will return (UINT64_MAX)
			// linear search (ls)
			template <typename T>
			static constexpr uint64_t linear_search(T* _Ptr, uint64_t _Size, const T& _elem)
			{
				for (uint64_t i(0); i < _Size; i++)
					if (_elem == _Ptr[i]) return i;
				return UINT64_MAX;
			}




			// get the index of an element using pointer 
			// if not found will return (UINT64_MAX)
			// if the array isn't sorted put the (not_Sorted) parameter --> (true)
			// binary search (bs) using loop
			template <typename Ty>
			static constexpr uint64_t binary_search(Ty* _Ptr, uint64_t _Size, const Ty& _elem, bool not_Sorted = false)
			{
				// array must be sorted for binary search
				if (not_Sorted) {
					return linear_search(_Ptr, _Size, _elem); // linear search
				}
				// (first & mid & last ) index of arr
				uint64_t first(0), last(_Size - 1);
				uint64_t mid(0);
				while (first <= last)
				{
					mid = (first + last) / 2;
					if (_elem == _Ptr[mid]) return mid;

					if (_elem > _Ptr[mid]) first = mid + 1;
					else last = mid - 1;
				}
				return UINT64_MAX;
			}





			// get the index of an element in array
			// if not found will return (UINT64_MAX)
			// if the array isn't sorted put the (not_Sorted) parameter --> (true)
			// binary search (bs) using loop
			// for descending sort
			template <typename Ty>
			static constexpr uint64_t binary_search_des(Ty* _Ptr, uint64_t _Size, const Ty& _elem, bool not_Sorted = false)
			{
				// array must be sorted for binary search
				if (not_Sorted) {
					return linear_search(_Ptr, _Size, _elem); // linear search
				}
				// (first & mid & last ) index of arr
				uint64_t first(0), last(_Size - 1);
				uint64_t mid(0);
				while (first <= last)
				{
					mid = (first + last) / 2;
					if (_elem == _Ptr[mid]) return mid;

					if (_elem > _Ptr[mid]) last = mid - 1;
					else first = mid + 1;
				}
				return UINT64_MAX;
			}


			//=========================================================================================================================


